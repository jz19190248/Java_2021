CalculateTask.java
	package org.concurrency.collation;
	public class CalculateTask implements Task {
		private static int count = 0;				// 线程个数
		private int num = count;				// 线程序号
		public CalculateTask() {
			count++;
		}
		public void execute() {
			System.out.println("[CalculateTask " + num + "] start...");
			try {
				Thread.sleep(3000);
			} catch (InterruptedException ie) {
			}
			System.out.println("[CalculateTask " + num + "] done.");
		}
	}
TimerTask.java
	package org.concurrency.collation;
	public class TimerTask implements Task {
		private static int count = 0;				// 线程个数
		private int num = count;				// 线程序号
		public TimerTask() {
			count++;
		}
		public void execute() {
			System.out.println("[TimerTask " + num + "] start...");
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println("[TimerTask " + num + "] done.");
		}
	}
	TaskQueue创建一个队列，客户端可以将请求放入队列，服务器线程可以从队列中取出任务。
TaskQueue.java
	package org.concurrency.collation;
	import java.util.*;
	public class TaskQueue {
		private List queue = new LinkedList();					// 创建队列
		//********从队列中取出任务并从队列中移除该任务*********
		public synchronized Task getTask() {							
			while (queue.size() == 0) {
				try {
					this.wait();							// 等待客户端新的请求
				} catch (InterruptedException e) {
					e.printStackTrace();
					return null;
				}
			}
			return (Task) queue.remove(0);					// 移除当前任务
		}
		//*********把当前的任务放入队列中**********
		public synchronized void putTask(Task task) {													queue.add(task);
			this.notifyAll();								// 等待服务器处理
		}
	}
